#! /bin/bash

#
# Upgrade is performed as follows
#
# Each executable in the script folders
#
# first scripts/pre-update then scripts/update and lastly scripts/post-update
#
# are run in alphabetical order
# executables should exit with:
# 0 - upon success
# 1 - upon none fatal error, upgrade could proceed
# 2 - upon fatal error, upgrade is terminated
#

#
# Mostly copy and pasted from the kinguard installer
#

# Find home

LOGNAME="Update System"
LOGLEVEL=6
export LOGNAME
export LOGLEVEL

source /usr/share/kgp-bashlibrary/scripts/kgp-logging.sh

CURDIR=`realpath $0`
SB=`dirname $CURDIR`

cd $SB || { log_crit "Failed to loctate base path"; exit 1; }

usage ()
{
	cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-f]

Perform a system upgrade

Available options:

-h	Print this help and exit
-v	Print script debug info
-f	Force upgrade, try to upgrade even if config says disabled
EOF
}

exit_fail()
{
	echo $@
	log_err "$@"
	exit 1
}

# parse cmdline
OPTIND=1
while getopts  ":hvf" opt
do
	case "$opt" in
	h)
		usage
		exit 0
		;;
	v)
		LOGLEVEL=8
		;;
	f)
		export FORCE_UPGRADE="yes"
		;;
	:)
		exit_fail "Error -${OPTARG} requires an argument."
		;;
	?)
		usage
		exit 0
		;;
	esac
done

log_debug "Path: ${SB} "

# Make sure update not already in progress
LOCKFILE="/var/run/lock/kgp-updates.lock"

# Get fd to upgrade lock file
exec {lock_fd}>"${LOCKFILE}"
flock -n "$lock_fd" || { log_warn "Unable to start upgrade, upgrade already running"; exit 0 ;}

# Send notification on update started
msgid=$(kgp-notifier -l LOG_NOTICE -m "Update in progress" -i "${ISSUER}")
log_debug "MSG id: $msgid"

terminate()
{
	log_debug "Terminate updater with exit value $1"
	# acknowledge the "start message"
	msgcount=$(kgp-notifier -a $msgid)

	exit $1
}

#
# Execute all executables in $1 dir
#
# Executable is called with remaining args on cmdline
# ($2->)
#
run_dir()
{
	local SP=0	# Anything processed?
	local DIR=$1
	shift
	if [ -d $DIR ]
	then
		log_debug "Run operations in $DIR"
		for x in $DIR/*
		do
			if [ -x $x ]
			then
				log_debug "Process $x"
				if $x ${@}
				then
					log_debug "Process successful"
					SP=1
				else
					if [ $? -gt 1 ]
					then
						log_crit "Process $x reported irrecoverable error"
						return 2
					else
						log_warn "Process $x reported problems but update could continue"
					fi
				fi
			else
				log_debug "Skip process of none executable $x"
			fi
		done
	else
		log_debug "Directory $DIR does not exist, skipping"
	fi
	return $SP
}


log_info "Running pre-upgrade executables"

run_dir scripts/pre-update "$SB"

if [ $? -eq 2 ]
then
	log_err "Irrevocable error in pre upgrade phase"
	terminate 2
fi


log_info "Running main upgrade executables"
run_dir scripts/update "$SB"

if [ $? -eq 2 ]
then
	log_err "Irrevocable error in main upgrade phase"
	terminate 2
fi

log_info "Running post-upgrade executables"
run_dir scripts/post-update "$SB"

if [ $? -eq 2 ]
then
	log_err "Irrevocable error in post upgrade phase"
	terminate 2
fi

# All OK and we are done
terminate 0
